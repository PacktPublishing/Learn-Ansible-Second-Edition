---
# tasks file for roles/stack-config

# EFS configuration tasks

- name: "Check that the EFS volume is ready"
  ansible.builtin.wait_for:
    host: "{{ aws_endpoints.efs }}"
    port: "2049"
    delay: 10
    timeout: 300

- name: "Ensure rpcbind service is running"
  ansible.builtin.service:
    name: "rpcbind"
    state: "started"
    enabled: true

- name: "Mount the EFS volume"
  ansible.posix.mount:
    src: "{{ aws_endpoints.efs }}:/"
    path: "{{ nfs.mount_point }}"
    opts: "{{ nfs.mount_options }}"
    state: "{{ nfs.state }}"
    fstype: "{{ nfs.fstype }}"

# WordPress system user tasks

- name: "Add the wordpress group"
  ansible.builtin.group:
    name: "{{ wordpress_system.group }}"
    state: "{{ wordpress_system.state }}"

- name: "Add the wordpress user"
  ansible.builtin.user:
    name: "{{ wordpress_system.user }}"
    group: "{{ wordpress_system.group }}"
    comment: "{{ wordpress_system.comment }}"
    home: "{{ wordpress_system.home }}"
    state: "{{ wordpress_system.state }}"

# NGINX configuration tasks

- name: "Copy the nginx.conf to /etc/nginx/"
  ansible.builtin.template:
    src: nginx-nginx.conf.j2
    dest: /etc/nginx/nginx.conf
    mode: "0644"
  notify: "Restart nginx"

- name: "Copy the default.conf to /etc/nginx/conf.d/"
  ansible.builtin.template:
    src: nginx-confd-default.conf.j2
    dest: /etc/nginx/conf.d/default.conf
    mode: "0644"
  notify: "Restart nginx"

- name: "Create the global directory in /etc/nginx/"
  ansible.builtin.file:
    dest: /etc/nginx/global/
    state: directory
    mode: "0644"

- name: "Copy the restrictions.conf to /etc/nginx/global/"
  ansible.builtin.copy:
    src: nginx-global-restrictions.conf
    dest: /etc/nginx/global/restrictions.conf
    mode: "0644"
  notify: "Restart nginx"

- name: "Copy the wordpress_shared.conf to /etc/nginx/global/"
  ansible.builtin.template:
    src: nginx-global-wordpress_shared.conf.j2
    dest: /etc/nginx/global/wordpress_shared.conf
    mode: "0644"
  notify: "Restart nginx"

# PHP configuration tasks

- name: "Get the PHP version"
  ansible.builtin.shell:
    cmd: "php -v | head -n 1 | cut -d ' ' -f 2 | cut -c 1-3"
  register: php_version_output
  tags:
    - "skip_ansible_lint"

- name: "Set the PHP version"
  ansible.builtin.set_fact:
    php_version: "{{ php_version_output.stdout }}"

- name: "Copy the www.conf to /etc/php-fpm.d/"
  ansible.builtin.template:
    src: php-fpmd-www.conf.j2
    dest: "{{ php_fpm_path }}"
    mode: "0644"
  notify: "Restart php-fpm"

- name: "Configure php.ini settings"
  ansible.builtin.lineinfile:
    dest: "{{ php_ini_path }}"
    regexp: "{{ item.regexp }}"
    line: "{{ item.replace }}"
    backup: "true"
    backrefs: "true"
  with_items: "{{ php.ini }}"
  notify: "Restart php-fpm"

# Start PHP-FPM and NGINX

- name: "Start php-fpm"
  ansible.builtin.service:
    name: "{{ php_service_name }}"
    state: "started"

- name: "Start nginx"
  ansible.builtin.service:
    name: "nginx"
    state: "started"

# MariaDB configuration tasks

# - name: "Start mariadb"
#   ansible.builtin.service:
#     name: "mariadb"
#     state: "started"
#     enabled: true

# - name: "Check to see if the ~/.my.cnf file exists"
#   ansible.builtin.stat:
#     path: "~/.my.cnf"
#   register: mycnf

# - name: "Change mysql root password if we need to"
#   community.mysql.mysql_user:
#     name: "{{ mariadb.username }}"
#     host: "{{ item }}"
#     password: "{{ mariadb.password }}"
#     check_implicit_admin: "true"
#     priv: "*.*:ALL,GRANT"
#     login_user: "{{ mariadb.username }}"
#     login_unix_socket: /var/run/mysqld/mysqld.sock
#   with_items: "{{ mariadb.hosts }}"
#   when: not mycnf.stat.exists
#   register: change_mysql_password_result
#   retries: 3
#   delay: 10
#   until: change_mysql_password_result is not failed

- name: "Set up .my.cnf file"
  ansible.builtin.template:
    src: "my.cnf.j2"
    dest: "~/.my.cnf"
    mode: "0644"

# - name: "Delete anonymous MySQL user"
#   community.mysql.mysql_user:
#     user: ""
#     host: "{{ item }}"
#     state: "absent"
#   with_items: "{{ mariadb.hosts }}"

# - name: "Remove the MySQL test database"
#   community.mysql.mysql_db:
#     db: "test"
#     state: "absent"
