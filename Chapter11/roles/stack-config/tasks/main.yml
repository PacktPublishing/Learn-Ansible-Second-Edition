---
# tasks file for roles/stack-config

# EFS configuration tasks

- name: "Check that the EFS volume is ready"
  ansible.builtin.wait_for:
    host: "{{ aws_endpoints.efs }}"
    port: "2049"
    delay: 10
    timeout: 300

- name: "ensure rpcbind service is running"
  ansible.builtin.service:
    name: "rpcbind"
    state: "started"
    enabled: "yes"

- name: "mount the EFS volume"
  ansible.posix.mount:
    src: "{{ aws_endpoints.efs }}:/"
    path: "{{ nfs.mount_point }}"
    opts: "{{ nfs.mount_options }}"
    state: "{{ nfs.state }}"
    fstype: "{{ nfs.fstype }}"

# WordPress system user tasks

- name: "add the wordpress group"
  ansible.builtin.group:
    name: "{{ wordpress_system.group }}"
    state: "{{ wordpress_system.state }}"

- name: "add the wordpress user"
  ansible.builtin.user:
    name: "{{ wordpress_system.user }}"
    group: "{{ wordpress_system.group }}"
    comment: "{{ wordpress_system.comment }}"
    home: "{{ wordpress_system.home }}"
    state: "{{ wordpress_system.state }}"


# NGINX configuration tasks

- name: "copy the nginx.conf to /etc/nginx/"
  ansible.builtin.template:
    src: "nginx-nginx.conf.j2"
    dest: "/etc/nginx/nginx.conf"
  notify: "restart nginx"

- name: copy the default.conf to /etc/nginx/conf.d/
  ansible.builtin.template:
    src: "nginx-confd-default.conf.j2"
    dest: "/etc/nginx/conf.d/default.conf"
  notify: "restart nginx"

- name: "create the global directory in /etc/nginx/"
  ansible.builtin.file:
    dest: "/etc/nginx/global/"
    state: "directory"
    mode: "0644"

- name: copy the restrictions.conf to /etc/nginx/global/
  ansible.builtin.copy:
    src: "nginx-global-restrictions.conf"
    dest: "/etc/nginx/global/restrictions.conf"
  notify: "restart nginx"

- name: copy the wordpress_shared.conf to /etc/nginx/global/
  ansible.builtin.template:
    src: "nginx-global-wordpress_shared.conf.j2"
    dest: "/etc/nginx/global/wordpress_shared.conf"
  notify: "restart nginx"

# PHP configuration tasks

- name: "Get the PHP version"
  ansible.builtin.shell:
    cmd: "php -v | head -n 1 | cut -d ' ' -f 2 | cut -c 1-3"
  register: php_version_output

- name: "Set the PHP version"
  set_fact:
    php_version: "{{ php_version_output.stdout }}"

- name: copy the www.conf to /etc/php-fpm.d/
  ansible.builtin.template:
    src: "php-fpmd-www.conf.j2"
    dest: "{{ php_fpm_path }}"
  notify: "restart php-fpm"

- name: configure php.ini
  ansible.builtin.lineinfile:
    dest: "{{ php_ini_path }}"
    regexp: "{{ item.regexp }}"
    line: "{{ item.replace }}"
    backup: "true"
    backrefs: "true"
  with_items: "{{ php.ini }}"
  notify: "restart php-fpm"

# Start PHP-FPM and NGINX

- name: start php-fpm
  ansible.builtin.service:
    name: "{{ php_service_name }}"
    state: "started"

- name: start nginx
  ansible.builtin.service:
    name: "nginx"
    state: "started"

# MariaDB configuration tasks

# - name: start mariadb
#   ansible.builtin.service:
#     name: "mariadb"
#     state: "started"
#     enabled: "yes"

# - name: "check to see if the ~/.my.cnf file exists"
#   ansible.builtin.stat:
#     path: "~/.my.cnf"
#   register: mycnf

# - name: "change mysql root password if we need to"
#   ansible.builtin.mysql_user:
#     name: "{{ mariadb.username }}"
#     host: "{{ item }}"
#     password: "{{ mariadb.password }}"
#     check_implicit_admin: "true"
#     priv: "*.*:ALL,GRANT"
#     login_user: "{{ mariadb.username }}"
#     login_unix_socket: "/var/run/mysqld/mysqld.sock"
#   with_items: "{{ mariadb.hosts }}"
#   when: mycnf.stat.exists == false

- name: set up .my.cnf file
  ansible.builtin.template:
    src: "my.cnf.j2"
    dest: "~/.my.cnf"

# - name: delete anonymous MySQL user
#   ansible.builtin.mysql_user:
#     user: ""
#     host: "{{ item }}"
#     state: "absent"
#   with_items: "{{ mariadb.hosts }}"

# - name: remove the MySQL test database
#   ansible.builtin.mysql_db:
#     db: "test"
#     state: "absent"
